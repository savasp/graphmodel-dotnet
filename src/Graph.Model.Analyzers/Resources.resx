<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion. Classes that don't support this are 
    serialized and stored with the mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GM001_Title" xml:space="preserve">
    <value>Only classes can implement INode or IRelationship</value>
  </data>
  <data name="GM001_MessageFormat" xml:space="preserve">
    <value>Only classes can implement {0}. Structs are not supported.</value>
  </data>
  <data name="GM001_Description" xml:space="preserve">
    <value>Types implementing INode or IRelationship must be classes, not structs, to ensure proper serialization and persistence capabilities.</value>
  </data>
  <data name="GM002_Title" xml:space="preserve">
    <value>Type must have a parameterless constructor</value>
  </data>
  <data name="GM002_MessageFormat" xml:space="preserve">
    <value>Type '{0}' must have a parameterless constructor to implement {1}.</value>
  </data>
  <data name="GM002_Description" xml:space="preserve">
    <value>Types implementing INode or IRelationship must have a public or internal parameterless constructor for proper deserialization.</value>
  </data>
  <data name="GM003_Title" xml:space="preserve">
    <value>Property must have public getter and setter</value>
  </data>
  <data name="GM003_MessageFormat" xml:space="preserve">
    <value>Property '{0}' in type '{1}' must have both public getter and setter.</value>
  </data>
  <data name="GM003_Description" xml:space="preserve">
    <value>All properties in types implementing INode or IRelationship must have public getters and setters for proper serialization.</value>
  </data>
  <data name="GM004_Title" xml:space="preserve">
    <value>Unsupported property type</value>
  </data>
  <data name="GM004_MessageFormat" xml:space="preserve">
    <value>Property '{0}' has unsupported type '{1}'. Only primitive types, string, date/time types, Point, and collections of these are allowed.</value>
  </data>
  <data name="GM004_Description" xml:space="preserve">
    <value>Properties must be of supported types for proper graph database serialization. Supported types include primitives, string, date/time types, enums, Point, and collections thereof.</value>
  </data>
  <data name="GM005_Title" xml:space="preserve">
    <value>Invalid complex type property</value>
  </data>
  <data name="GM005_MessageFormat" xml:space="preserve">
    <value>Complex type property '{0}' in INode implementation must be a class with a parameterless constructor and only simple properties.</value>
  </data>
  <data name="GM005_Description" xml:space="preserve">
    <value>Complex type properties in INode implementations must be classes with parameterless constructors and contain only simple properties that follow the same type constraints.</value>
  </data>
</root>