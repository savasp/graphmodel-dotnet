<Project>
    <PropertyGroup>
        <!-- Default to Debug configuration for local development -->
        <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    </PropertyGroup>

    <PropertyGroup>
        <!-- Compile settings -->
        <TargetFrameworks>net10.0;net9.0</TargetFrameworks>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
        <LangVersion>preview</LangVersion>
        <GenerateAssemblyInfo>true</GenerateAssemblyInfo>
        <EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
        <WarningsAsErrors>Nullable</WarningsAsErrors>

        <!-- Build settings -->
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <IncludeSymbols>true</IncludeSymbols>
        <SymbolPackageFormat>snupkg</SymbolPackageFormat>

        <!-- Package settings -->
        <IncludeBuildOutput>true</IncludeBuildOutput>
        <Company>Cvoya</Company>
        <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
        <PackageProjectUrl>https://github.com/savasp/graphmodel-dotnet</PackageProjectUrl>
        <RepositoryUrl>https://github.com/savasp/graphmodel-dotnet</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <PackageOutputPath>$(MSBuildThisFileDirectory)artifacts</PackageOutputPath>
        <PackageReadmeFile>README.md</PackageReadmeFile>

        <!-- Development mode uses project references by default -->
        <!-- This ensures that CI/CD workflows and local development work without requiring pre-built packages -->
        <UseProjectReferences Condition="'$(UseProjectReferences)' == '' AND '$(Configuration)' == 'Debug'">true</UseProjectReferences>
        <UseProjectReferences Condition="'$(UseProjectReferences)' == '' AND '$(Configuration)' == 'Benchmark'">true</UseProjectReferences>
        <UseProjectReferences Condition="'$(UseProjectReferences)' == '' AND '$(Configuration)' == 'LocalFeed'">true</UseProjectReferences>
        <UseProjectReferences Condition="'$(UseProjectReferences)' == '' AND '$(Configuration)' == 'Release'">true</UseProjectReferences>

        <!-- Use package references only when explicitly requested -->
        <!-- Set UsePackageReferences=true to build with package references instead of project references -->
        <UseProjectReferences Condition="'$(UsePackageReferences)' == 'true'">false</UseProjectReferences>

        <!-- LocalFeed configuration: Release optimizations + project references + package generation -->
        <Optimize Condition="'$(Configuration)' == 'LocalFeed'">true</Optimize>
        <GeneratePackageOnBuild Condition="'$(Configuration)' == 'LocalFeed'">true</GeneratePackageOnBuild>

        <!-- Only generate packages in Release/LocalFeed mode or when explicitly requested -->
        <GeneratePackageOnBuild Condition="'$(Configuration)' == 'Release' OR '$(ForcePackageGeneration)' == 'true'">true</GeneratePackageOnBuild>
        <GeneratePackageOnBuild Condition="'$(GeneratePackageOnBuild)' == ''">false</GeneratePackageOnBuild>
    </PropertyGroup>

    <!-- Include README in the package -->
    <ItemGroup>
        <None Include="$(MSBuildProjectDirectory)\README.md" Pack="true" PackagePath="\" />
    </ItemGroup>

    <!-- Test project settings -->
    <PropertyGroup Condition=" $(MSBuildProjectDirectory.Contains('/tests/')) ">
        <IsTestProject>true</IsTestProject>
        <GenerateDocumentationFile>false</GenerateDocumentationFile>
        <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
        <IsPackable>false</IsPackable>
    </PropertyGroup>

    <!-- Example project settings -->
    <PropertyGroup Condition=" $(MSBuildProjectDirectory.Contains('/examples/')) ">
        <GenerateDocumentationFile>false</GenerateDocumentationFile>
        <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
        <IsPackable>false</IsPackable>
    </PropertyGroup>

    <!-- Version Management -->
    <PropertyGroup>
        <VersionFile>$(MSBuildThisFileDirectory)VERSION</VersionFile>
        <AssemblyVersionFile>$(MSBuildThisFileDirectory)VERSION.ASSEMBLY</AssemblyVersionFile>

        <FullVersion Condition="Exists('$(VersionFile)')">$([System.IO.File]::ReadAllText('$(VersionFile)').Trim())</FullVersion>
        <AssemblyVersionString Condition="Exists('$(AssemblyVersionFile)')">$([System.IO.File]::ReadAllText('$(AssemblyVersionFile)').Trim())</AssemblyVersionString>

        <Version Condition="Exists('$(VersionFile)')">$(FullVersion)</Version>
        <PackageVersion Condition="Exists('$(VersionFile)')">$(FullVersion)</PackageVersion>
        <AssemblyVersion Condition="Exists('$(AssemblyVersionFile)')">$(AssemblyVersionString)</AssemblyVersion>
        <FileVersion Condition="Exists('$(AssemblyVersionFile)')">$(AssemblyVersionString)</FileVersion>
    </PropertyGroup>

    <Target Name="ShowVersion">
        <PropertyGroup Condition="Exists('$(VersionFile)')">
            <CurrentVersion>$([System.IO.File]::ReadAllText('$(VersionFile)').Trim())</CurrentVersion>
        </PropertyGroup>
        <Message Text="Current version: $(CurrentVersion)" Importance="high" Condition="'$(CurrentVersion)' != ''" />
        <Message Text="No VERSION file found" Importance="high" Condition="'$(CurrentVersion)' == ''" />
    </Target>

    <!-- Local NuGet Feed Management Targets -->
    <PropertyGroup>
        <LocalFeedPath>$(MSBuildThisFileDirectory)local-nuget-feed</LocalFeedPath>
        <LocalFeedSourceName>GraphModel-LocalFeed</LocalFeedSourceName>
        <LocalFeedSentinelFile>$(LocalFeedPath)/.feed-setup-complete</LocalFeedSentinelFile>
    </PropertyGroup>

    <Target Name="SetupLocalFeed" BeforeTargets="Build" Condition="'$(Configuration)' == 'LocalFeed'">
        <Message Text="ðŸš€ Setting up local NuGet feed for GraphModel..." Importance="high" />

        <!-- Create local feed directory -->
        <MakeDir Directories="$(LocalFeedPath)" />

        <!-- Add NuGet source if not already added -->
        <Exec Command="dotnet nuget list source | grep '$(LocalFeedSourceName)' || dotnet nuget add source '$(LocalFeedPath)' --name '$(LocalFeedSourceName)'" ContinueOnError="true" />

        <!-- Create sentinel file -->
        <WriteLinesToFile File="$(LocalFeedSentinelFile)" Lines="Local feed setup completed at $([System.DateTime]::Now)" Overwrite="true" />

        <Message Text="âœ… Local NuGet feed ready at: $(LocalFeedPath)" Importance="high" />
    </Target>

    <Target Name="PublishToLocalFeed" AfterTargets="Pack" Condition="'$(Configuration)' == 'LocalFeed' AND '$(IsPackable)' != 'false'">
        <ItemGroup>
            <PackageFiles Include="$(PackageOutputPath)\*.nupkg" />
        </ItemGroup>

        <Copy SourceFiles="@(PackageFiles)" DestinationFolder="$(LocalFeedPath)" Condition="@(PackageFiles) != ''" />

        <Message Text="ðŸ“¦ Published $(MSBuildProjectName) to local feed" Importance="high" Condition="@(PackageFiles) != ''" />
    </Target>

    <Target Name="CleanLocalFeed">
        <Message Text="ðŸ§¹ Cleaning up GraphModel local NuGet feed..." Importance="high" />

        <!-- Remove NuGet source -->
        <Exec Command="dotnet nuget remove source '$(LocalFeedSourceName)'" ContinueOnError="true" />

        <!-- Clean directories only if they exist -->
        <RemoveDir Directories="$(LocalFeedPath)" Condition="Exists('$(LocalFeedPath)')" />
        <RemoveDir Directories="$(PackageOutputPath)" Condition="Exists('$(PackageOutputPath)')" />

        <!-- Clear NuGet cache -->
        <Exec Command="dotnet nuget locals all --clear" ContinueOnError="true" />

        <Message Text="âœ… Cleanup complete! You can now build normally with project references." Importance="high" />
    </Target>

    <Target Name="TestLocalFeed" DependsOnTargets="CleanLocalFeed">
        <Message Text="ðŸ§ª Testing local NuGet feed workflow..." Importance="high" />

        <!-- Build with LocalFeed configuration to generate packages -->
        <MSBuild Projects="$(MSBuildThisFileDirectory)graphmodel.sln" Properties="Configuration=LocalFeed" Targets="Build" />

        <!-- Test Release configuration with package references -->
        <Message Text="ðŸ”„ Testing Release build with package references..." Importance="high" />
        <Exec Command="dotnet restore --force" />
        <MSBuild Projects="$(MSBuildThisFileDirectory)graphmodel.sln" Properties="Configuration=Release" Targets="Build" />

        <Message Text="âœ… Local feed test completed successfully!" Importance="high" />
    </Target>

    <!-- Generate packages with package references for distribution -->
    <Target Name="BuildWithPackageReferences" DependsOnTargets="CleanLocalFeed">
        <Message Text="ðŸ“¦ Building with package references for distribution..." Importance="high" />

        <!-- First, build with LocalFeed to generate packages -->
        <MSBuild Projects="$(MSBuildThisFileDirectory)graphmodel.sln" Properties="Configuration=LocalFeed" Targets="Build" />

        <!-- Then build with package references -->
        <Message Text="ðŸ”„ Building with package references..." Importance="high" />
        <Exec Command="dotnet restore --force" />
        <MSBuild Projects="$(MSBuildThisFileDirectory)graphmodel.sln" Properties="Configuration=Release;UsePackageReferences=true" Targets="Build" />

        <Message Text="âœ… Build with package references completed successfully!" Importance="high" />
    </Target>
</Project>
