name: 📚 Documentation

on:
  push:
    branches: [ "main" ]
    paths: 
      - 'src/**'
      - 'docs/**'
      - 'scripts/build-docs.*'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ "main" ]
    paths: 
      - 'src/**'
      - 'docs/**'
      - 'scripts/build-docs.*'
  workflow_dispatch:

jobs:
  build-docs:
    name: 📖 Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout
      uses: actions/checkout@v4

    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'

    - name: 🗂️ Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 📋 Restore Dependencies
      run: dotnet restore

    - name: 🔨 Build XML Documentation
      run: |
        echo "🏗️ Building projects and generating XML documentation..."
        ./scripts/build-docs.sh Debug

    - name: 📊 Upload Documentation Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: xml-documentation
        path: docs/api/
        retention-days: 30
        if-no-files-found: error

    - name: 📝 Validate XML Documentation
      run: |
        echo "🔍 Validating XML documentation files..."
        for file in docs/api/*.xml; do
          if [ -f "$file" ]; then
            echo "✅ $(basename "$file"): $(wc -l < "$file") lines"
            # Basic XML validation
            xmllint --noout "$file" 2>/dev/null && echo "  📋 Valid XML" || echo "  ❌ Invalid XML"
          fi
        done

    - name: 📈 Documentation Coverage Report
      run: |
        echo "📊 Documentation Coverage Summary:"
        echo "=================================="
        total_size=0
        file_count=0
        
        for file in docs/api/*.xml; do
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
            total_size=$((total_size + size))
            file_count=$((file_count + 1))
            echo "📄 $(basename "$file"): ${size} bytes"
          fi
        done
        
        echo "=================================="
        echo "📦 Total files: $file_count"
        echo "📏 Total size: ${total_size} bytes ($(echo "scale=1; $total_size/1024" | bc) KB)"
        
        # Check if we have documentation for all main projects
        expected_files=("Cvoya.Graph.Model.xml" "Cvoya.Graph.Model.Neo4j.xml" "Cvoya.Graph.Model.Serialization.xml")
        missing_files=()
        
        for expected in "${expected_files[@]}"; do
          if [ ! -f "docs/api/$expected" ]; then
            missing_files+=("$expected")
          fi
        done
        
        if [ ${#missing_files[@]} -eq 0 ]; then
          echo "✅ All expected documentation files are present"
        else
          echo "⚠️  Missing documentation files:"
          printf '  - %s\n' "${missing_files[@]}"
        fi

  deploy-docs:
    name: 🚀 Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: 📦 Checkout
      uses: actions/checkout@v4

    - name: 📥 Download API Documentation
      uses: actions/download-artifact@v4
      with:
        name: xml-documentation
        path: docs/api/

    - name: 🏗️ Setup Ruby (for Jekyll)
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true

    - name: 📦 Install Jekyll Dependencies
      run: |
        echo "gem 'jekyll', '~> 4.3'" > Gemfile
        echo "gem 'minima', '~> 2.5'" >> Gemfile
        echo "gem 'jekyll-feed', '~> 0.15'" >> Gemfile
        echo "gem 'jekyll-sitemap', '~> 1.4'" >> Gemfile
        echo "gem 'kramdown-parser-gfm', '~> 1.1'" >> Gemfile
        bundle install

    - name: 🏗️ Build Jekyll Site
      run: |
        echo "🏗️ Building Jekyll site..."
        bundle exec jekyll build --destination _site
        
        echo "📋 Jekyll build completed. Contents:"
        ls -la _site/

    - name: 📤 Upload Documentation Site
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site

    - name: 🚀 Deploy to GitHub Pages
      uses: actions/deploy-pages@v4 